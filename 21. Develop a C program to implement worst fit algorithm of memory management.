#include <stdio.h>
#define MAX_BLOCKS 10
#define MAX_SIZE 100
int block_size[MAX_BLOCKS];
int block_status[MAX_BLOCKS];
void worst_fit_init()
{
    int i;
    for(i = 0; i < MAX_BLOCKS; i++)
    {
        block_size[i] = MAX_SIZE;
        block_status[i] = 0;
    }
}
int worst_fit_alloc(int size)
{
    int i, index = -1, max = 0;
    for(i = 0; i < MAX_BLOCKS; i++)
    {
        if(block_status[i] == 0 && block_size[i] >= size && block_size[i] > max)
        {
            index = i;
            max = block_size[i];
        }
    }
    if(index != -1)
    {
        block_status[index] = 1;
        printf("Allocated block with size: %d\n", block_size[index]);
    }
    else
    {
        printf("No suitable block available.\n");
    }
    return index;
}
void worst_fit_free(int index)
{
    if(index != -1 && block_status[index] == 1)
    {
        block_status[index] = 0;
        printf("Freed block with size: %d\n", block_size[index]);
    }
    else
    {
        printf("Invalid block index.\n");
    }
}
int main()
{
    int size, index;
    worst_fit_init();
    printf("Enter the size of the memory block to allocate: ");
    scanf("%d", &size);
    index = worst_fit_alloc(size);
    if(index != -1)
    {
        printf("Enter the size of the memory block to free: ");
        scanf("%d", &size);
        worst_fit_free(index);
    }
    return 0;
}
