#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#define NUM_PHILOSOPHERS 5
#define NUM_CHOPSTICKS 5
pthread_mutex_t chopsticks[NUM_CHOPSTICKS];
void *philosopher(void *arg) 
{
    int i = *(int *)arg;
    int left_chopstick = i;
    int right_chopstick = (i + 1) % NUM_CHOPSTICKS;
    while (1) 
    {
        printf("Philosopher %d is thinking.\n", i);
        sleep(rand() % 3 + 1);
        printf("Philosopher %d is hungry.\n", i);
        pthread_mutex_lock(&chopsticks[left_chopstick]);
        printf("Philosopher %d picked up left chopstick %d.\n", i, left_chopstick);
        pthread_mutex_lock(&chopsticks[right_chopstick]);
        printf("Philosopher %d picked up right chopstick %d.\n", i, right_chopstick);
        printf("Philosopher %d is eating.\n", i);
        sleep(rand() % 3 + 1);
        pthread_mutex_unlock(&chopsticks[left_chopstick]);
        printf("Philosopher %d put down left chopstick %d.\n", i, left_chopstick);
        pthread_mutex_unlock(&chopsticks[right_chopstick]);
        printf("Philosopher %d put down right chopstick %d.\n", i, right_chopstick);
    }
}
int main() 
{
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int id[NUM_PHILOSOPHERS];
    srand(time(NULL));
    for (int i = 0; i < NUM_CHOPSTICKS; i++) 
    {
        pthread_mutex_init(&chopsticks[i], NULL);
    }
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) 
    {
        id[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &id[i]);
    }
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) 
    {
        pthread_join(philosophers[i], NULL);
    }
    for (int i = 0; i < NUM_CHOPSTICKS; i++) 
    {
        pthread_mutex_destroy(&chopsticks[i]);
    }
    return 0;
}
